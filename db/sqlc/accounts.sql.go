// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO Accounts (username, role , user_id) VALUES ($1, $2, $3) RETURNING id, username, role, created_at, reputation, user_id
`

type CreateAccountParams struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.createAccountStmt, createAccount, arg.Username, arg.Role, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
		&i.Reputation,
		&i.UserID,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM Accounts
WHERE user_id = $1 RETURNING user_id
`

func (q *Queries) DeleteAccount(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteAccountStmt, deleteAccount, userID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, role, created_at, reputation, user_id FROM Accounts
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, userID int32) (Account, error) {
	row := q.queryRow(ctx, q.getAccountStmt, getAccount, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.CreatedAt,
		&i.Reputation,
		&i.UserID,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, role, created_at, reputation, user_id FROM Accounts
ORDER BY id 
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.query(ctx, q.listAccountsStmt, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Role,
			&i.CreatedAt,
			&i.Reputation,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReputation = `-- name: UpdateReputation :exec
UPDATE Accounts SET reputation = reputation + $1
WHERE user_id = $2
`

type UpdateReputationParams struct {
	Reputation int32 `json:"reputation"`
	UserID     int32 `json:"user_id"`
}

func (q *Queries) UpdateReputation(ctx context.Context, arg UpdateReputationParams) error {
	_, err := q.exec(ctx, q.updateReputationStmt, updateReputation, arg.Reputation, arg.UserID)
	return err
}
