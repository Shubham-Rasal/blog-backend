# FILEPATH: /d:/coding/goPrograms/practice/.github/workflows/ci.yml
# This workflow will build a golang project and run tests.
# It uses PostgreSQL as a service and runs migrations before running tests.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Deploy to Production

on:
  push:
    branches: [ "master" ]
  
    
jobs:

  build:
    name: Build Image
    runs-on: ubuntu-latest
    environment: CI

    env:
      DB_DRIVER: ${{ secrets.DB_DRIVER }}
      DB_SOURCE: ${{ secrets.DB_SOURCE }}
      SERVER_ADDRESS: ${{ secrets.SERVER_ADDRESS }}
      TOKEN_SYMMETRIC_KEY: ${{ secrets.TOKEN_SYMMETRIC_KEY }}
      ACCESS_TOKEN_DURATION: ${{ secrets.ACCESS_TOKEN_DURATION }}
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1
      
      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Load environtment variables to app.env from github secrets
        run: |
            echo "DB_DRIVER=$DB_DRIVER" >> app.env
            echo "DB_SOURCE=$DB_SOURCE" >> app.env
            echo "SERVER_ADDRESS=$SERVER_ADDRESS" >> app.env
            echo "TOKEN_SYMMETRIC_KEY=$TOKEN_SYMMETRIC_KEY" >> app.env
            echo "ACCESS_TOKEN_DURATION=$ACCESS_TOKEN_DURATION" >> app.env


      - name: Build, tag, and push docker image to Amazon ECR Private
       
        env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            # REGISTRY_ALIAS: blog-backend
            REPOSITORY: blog-backend
            IMAGE_TAG: ${{ github.sha }}
        run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f Dockerfile.prod .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG